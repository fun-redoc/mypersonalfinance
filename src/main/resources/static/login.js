    function clearAndHideErrors() {
        while(errorList && errorList.children && errorList.children.length > 0) {
            errorList.removeChild(errorList.firstChild);
        }
        errors.setAttribute("hidden", true);
    }

    function addError(err) {
        const li = document.createElement("li");
        li.appendChild(document.createTextNode(err));
        errorList.appendChild(li);
        if(errors.hasAttribute("hidden")) {
            errors.removeAttribute("hidden");
        }
    }

    // returns Promise of Assertion
    function generateAssertionForLogin(challenge) {
        if (!window.PublicKeyCredential) {
            throw new Error("this browser is not capable for passkeys");
        }
        if(!challenge) {
            throw new Error("security challenge is empty, cannot procede");
        }

        // credentialId is generated by the authenticator and is an opaque random byte array
        //var credentialId = new Uint8Array([183, 148, 245 /* more random bytes previously generated by the authenticator */]);
        var options = {
          // The challenge is produced by the server; see the Security Considerations
          challenge: Uint8Array.from(challenge, c=>c.charCodeAt(0)),
          timeout: 60000,  // 1 minutes
        };

        return navigator.credentials.get({ "publicKey": options });
    }
